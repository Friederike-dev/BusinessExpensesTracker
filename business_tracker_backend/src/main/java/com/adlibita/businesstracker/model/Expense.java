package com.adlibita.businesstracker.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDateTime;

/**
 * Expense Entity - Represents a business expense in the system
 * 
 * This JPA entity maps to the 'expenses' table in the database and contains
 * all necessary fields for tracking business expenses including validation
 * and automatic timestamp management.
 * 
 * @author Friederike H.
 * @version 1.0
 * @since 2025-01-30
 */

// Hibernate sees @Entity as JPA annotation and automatically creates the "expenses" table in database
// -- Hibernate generates and executes:
// CREATE TABLE expenses (
//     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
//     title VARCHAR(255) NOT NULL,
//     amount DOUBLE NOT NULL,
//     category VARCHAR(100) NOT NULL,
//     expense_date TIMESTAMP NOT NULL,
//     description VARCHAR(1000),
//     image_path VARCHAR(500),
//     created_at TIMESTAMP NOT NULL,
//     updated_at TIMESTAMP NOT NULL
// );
@Entity // Tells Spring that this class is a database entity
@Table(name = "expenses") // Specifies the exact table name in database
public class Expense {

    // === PRIMARY KEY CONFIGURATION ===
    
    /**
     * Primary key field with auto-increment functionality
     * Uses IDENTITY strategy for database-generated IDs
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // === REQUIRED FIELDS WITH VALIDATION ===

    /**
     * Title/name of the expense (required field)
     * Validation: Not blank, 1-255 characters
     * Database: VARCHAR(255) NOT NULL
     */
    @NotBlank(message = "Title is required")
    @Size(min = 1, max = 255)
    @Column(name = "title", nullable = false, length = 255)
    private String title;

    /**
     * Monetary amount of the expense (required field)
     * Validation: Not null, between 0.01 and 999999.99
     * Database: DOUBLE NOT NULL
     */
    @NotNull(message = "Amount is required")
    @DecimalMin(value = "0.01")
    @DecimalMax(value = "999999.99")
    @Column(name = "amount", nullable = false)
    private Double amount;

    /**
     * Category classification for the expense (required field)
     * Examples: "Travel", "Office Supplies", "Meals", etc.
     * Validation: Not blank, max 100 characters
     * Database: VARCHAR(100) NOT NULL
     */
    @NotBlank(message = "Category is required")
    @Size(max = 100)
    @Column(name = "category", nullable = false, length = 100)
    private String category;

    /**
     * Date and time when the expense occurred (required field)
     * JSON format: "yyyy-MM-dd'T'HH:mm:ss" for frontend compatibility
     * Database: TIMESTAMP NOT NULL
     */
    @NotNull(message = "Expense date is required")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    @Column(name = "expense_date", nullable = false)
    private LocalDateTime expenseDate;

    // === OPTIONAL FIELDS ===

    /**
     * Additional description or notes for the expense (optional field)
     * Validation: Max 1000 characters
     * Database: VARCHAR(1000) NULL
     */
    @Size(max = 1000)
    @Column(name = "description", nullable = true, length = 1000)
    private String description;

    /**
     * File path to uploaded receipt image (optional field)
     * Future feature for receipt management
     * Validation: Max 500 characters
     * Database: VARCHAR(500) NULL
     */
    @Size(max = 500)
    @Column(name = "image_path", nullable = true, length = 500)
    private String imagePath;

    // === AUDIT FIELDS (AUTOMATIC TIMESTAMP MANAGEMENT) ===

    /**
     * Timestamp when the expense record was created
     * Automatically set on entity creation, never updated
     * Database: TIMESTAMP NOT NULL, updatable = false
     */
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * Timestamp when the expense record was last updated
     * Automatically updated on every entity modification
     * Database: TIMESTAMP NOT NULL
     */
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    // === CONSTRUCTORS ===

    /**
     * Default no-argument constructor required by JPA
     * Used by Hibernate for entity instantiation
     */
    public Expense() {
    }

    /**
     * Constructor for creating new expense with required fields
     * 
     * @param title The title/name of the expense
     * @param amount The monetary amount of the expense
     * @param category The category classification
     * @param expenseDate When the expense occurred
     */
    public Expense(String title, Double amount, String category, LocalDateTime expenseDate) {
        this.title = title;
        this.amount = amount;
        this.category = category;
        this.expenseDate = expenseDate;
    }

    // === JPA LIFECYCLE CALLBACKS ===

    /**
     * Called automatically before persisting entity to database
     * Sets both createdAt and updatedAt to current timestamp
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    /**
     * Called automatically before updating entity in database
     * Updates the updatedAt timestamp to current time
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // === GETTER AND SETTER METHODS ===
    // Standard JavaBean pattern for property access

    /**
     * Gets the unique identifier of the expense
     * @return The expense ID (auto-generated)
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the expense
     * @param id The expense ID (typically not set manually)
     */
    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public LocalDateTime getExpenseDate() {
        return expenseDate;
    }

    public void setExpenseDate(LocalDateTime expenseDate) {
        this.expenseDate = expenseDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public String toString() {
        return "Expense{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", amount=" + amount +
                ", category='" + category + '\'' +
                ", expenseDate=" + expenseDate +
                '}';
    }
}